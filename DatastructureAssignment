Q.1 Create a structure Student ( rollno, name), Create a structure variable and Access the members using structure variable.
#include<stdio.h>
#include<conio.h>
#include<string.h>

struct student
{
	int rollno;
	char name[20];
};

main()
{
	struct student s1,s2,s3,s4,s5;
	
	s1.rollno=1;
	s2.rollno=2;
	s3.rollno=3;
	s4.rollno=4;
	s5.rollno=5;
	
	strcpy(s1.name,"Rahul");
	strcpy(s2.name,"Neha");
	strcpy(s3.name,"Roma");
	strcpy(s4.name,"priya");
	strcpy(s5.name,"Aisha");
	
	printf("\nrollno of student 1 : %d\n name : %s\n",s1.rollno,s1.name);
	printf("\nrollno of student 2 : %d\n name : %s\n",s2.rollno,s2.name);
	printf("\nrollno of student 3 : %d\n name : %s\n",s3.rollno,s3.name);
	printf("\nrollno of student 4 : %d\n name : %s\n",s4.rollno,s4.name);
	printf("\nrollno of student 5 : %d\n name : %s\n",s5.rollno,s5.name);
	
}


Q.2 Create a structure pointer which can access the members of the structure Student and print member values.
#include<stdio.h>
#include<string.h>

  struct student
 {
 	int eid;
 	char name[30];
 	char city[20];
 	
 };
 
main()
{
 	  struct employee e[3];
 	  char nm[20];
 	  char cy[20];
	
	int i;
	for(i=0;i<3;i++)
	{
		printf("Enter id : ");
		scanf("%d",&e[i].eid);
		
		fflush(stdin);
		printf("Enter name : ");
		gets(nm);
		strcpy(e[i].name,nm);
		
		fflush(stdin);
		printf("Enter city : ");
		gets(nm);
		strcpy(e[i].city,cy);	
		
		for(i=0;i<3;i++)
		{
			printf("id : %d,name : %s,city : %s\n",e[i].eid,e[i].city);
		}
		
	}	
	
}


============================================================================================================

Q.3 Create an array of structure which is used to store 3 employee records.

#include<stdio.h>
#include<conio.h>

struct employee
{
	int id;
	char name[30];
	char city[30];
};

int main()
{
	struct employee e[7];
	char nm[25];
	char cy[20];
	int i;
	for(i=0;i<3;i++)
	{
		printf("enter id : ");
		scanf("%d",&e[i].id);
		
		fflush(stdin);
		printf("enter name : ");
		gets(nm);
		strcpy(e[i].name,nm);
		
		fflush(stdin);
		printf("enter city : ");
		gets(cy);
		strcpy(e[i].city,cy);
		fflush(stdin);
	}
	
	for(i=0;i<3;i++)
	{
		printf("id : %d , name : %s , city : %s\n",e[i].id,e[i].name,e[i].city);
	}
}
==========================================================================================================================================
Q.4 Create a float pointer which points to the float array and access all elements of array using float pointer
#include<stdio.h>

int main()
{
	int *p;
	
	p=(int*)malloc(sizeof(int));
	*p=400;
	
	printf("value : %d ",*p);
	
	free(p);
  
	
	
	
}

===================================================================================================================
Q.5 Create an integer pointer for which memory is allocated dynamically.
#include<stdio.h>
#include<stdlib.h>

int main()
{
	int *p;
	
	p=(int*)malloc(sizeof(int));
	*p=400;
	
	printf("value : %d ",*p);
	
	free(p);
  
	
	
	
}
========================================================================================
Q.6 Create a stack of 5 characters and display all elements.
#include<stdio.h>
#include<stdlib.h>
#define SIZE 7

 

typedef struct st
{
    int top;
    char elements[SIZE];
}stack;

 

void initialize(stack *sp)
{
    sp->top=-1;
}

 

void push(stack *sp,int item)
{
    if(is_full(sp))
    printf("\nstack overflow");
    
    else 
    sp->elements[++sp->top]=item;
}

 

int pop(stack *sp)
{
    int x;
    if(is_empty(sp))
    printf("\nstack underflow");
    
    else
    x=sp->elements[sp->top--];
    
    return x;
}

 

int is_full(stack *sp)
{
    if(sp->top==SIZE-1)
    return 1;
    
    else
    return 0;
}

 

int is_empty(stack *sp)
{
    if(sp->top== -1)
    return 1;
    
    else
    return 0;
}

 

int main()
{
    stack s1;
    
    push(&s1,'r');
    push(&s1,'o');
    push(&s1,'s');
    push(&s1,'h');
    push(&s1,'a');
    push(&s1,'n');
    
    int i;
    
    for(i=s1.top;i!=-1;i--)
    {
        printf("%c",s1.elements[i]);
    }
    
    
}
=====================================================================================
Q.7 Create a stack of 5 names of employees and delete the last name and display it. 


#include<stdio.h>
#include<stdlib.h>
#define SIZE 10
typedef struct st
{
    int top;
    char elements[10][10];
}stack;





void initialize(stack *sp)
{
    sp->top=-1;
}


//FOR ADDING VALUES TO IT
void push(stack *sp,char* item)
{
    if(sp->top == SIZE-1)
    printf("\nstack overflow\n");
    else
    strcpy(sp->elements[++sp->top],item);   
    
}





//OVERWRITTING
int pop(stack *sp)
{
    int x;             //BECAUSE WE WANT TO RETURN BACK THE VALUE  
    if(sp->top == -1)
    printf("\nstack underflow");
    else
    x=sp->elements[sp->top--];
    return x;
}





void display(stack *sp)
{
    int i;
    
    for(i=sp->top;i!=-1;i--)
    {
        printf("%s\n",*(sp->elements+i));
    }
}
int main()
{
    stack e1;
    
    initialize(&e1);
    push(&e1,"Roma");
    push(&e1,"Hina");
    push(&e1,"JOSEPHINE");
    push(&e1,"Neha");
    push(&e1,"Rahul");
    
    display(&e1);
    
    printf("\n\n");
    pop(&e1);
    
    display(&e1);
}
=============================================================================================================================

Q.8 Create two stacks A and B . A contains 3 alphabets and B contains 3 numbers. Display Both stacks.
#include<stdio.h>
#include<stdlib.h>
#define SIZE 3

 

typedef struct a_st
{
    int Atop;
    char Aelements[SIZE];
}A;

 

typedef struct b_st
{
    int Btop;
    int Belements[SIZE];
}B;

 

void Ainitialize(A *sp)
{
    sp->Atop=-1;
}

 

void Binitialize(B *sp)
{
    sp->Btop=-1;
}

 

void Apush(A *sp,char item)
{
    if(A_is_full(sp))
    printf("\nstack overflow\n");
    
    else
    sp->Aelements[++sp->Atop]=item;
}

 

void Bpush(B *sp,int item)
{
    if(B_is_full(sp))
    printf("\nstack overflow\n");
    
    else
    sp->Belements[++sp->Btop]=item;
}

 

int Apop(A *sp)
{
    int x;
    
    if(A_is_empty(sp))
    printf("\nstack underflow");
    
    else
    x=sp->Aelements[sp->Atop--];
    
    return x;
}

 

int Bpop(B *sp)
{
    int x;
    
    if(B_is_empty(sp))
    printf("\nstack underflow");
    
    else
    x=sp->Belements[sp->Btop--];
    
    return x;
}

 

int A_is_full(A*sp)
{
    if(sp->Atop == SIZE-1)
    return 1;
    
    else
    return 0;
}

 

int B_is_full(B *sp)
{
    if(sp->Btop == SIZE-1)
    return 1;
    
    else
    return 0;
}

 

int A_is_empty(A *sp)
{
    if(sp->Atop == -1)
    return 1;
    
    else
    return 0;
}

 

int B_is_empty(B *sp)
{
    if(sp->Btop == -1)
    return 1;
    
    else
    return 0;
}

 

void A_display(A *sp)
{
    int i;
    
    for(i=sp->Atop;i!=-1;i--)
    {
        printf("%c",sp->Aelements[i]);
    }
    
    printf("\n\n");
}

 

void B_display(B *sp)
{
    int i;
    
    for(i=sp->Btop;i!=-1;i--)
    {
        printf("%d",sp->Belements[i]);
    }
    
    printf("\n\n");
}

 

int main()
{
     A a;
    
    Ainitialize(&a);
    
    Apush(&a,'a');
    Apush(&a,'b');
    Apush(&a,'c');
    
    A_display(&a);
    
    B b;
    
    Binitialize(&b);
    
    Bpush(&b,1);
    Bpush(&b,2);
    Bpush(&b,3);
    
    B_display(&b);
    
    
}
=============================================================================================================
Q.9 Create a queue which contains 5 double values and print all values.

#include<stdio.h>
#include<stdlib.h>
#define SIZE 5

 

typedef struct queue

 

{
int front;
int rear;
double elements[SIZE];
}queue;

 

void initialize(queue *qp)
{
qp->front=-1;
qp->rear=-1;
}
void add(queue *qp,double item)
{
if(qp->rear==SIZE-1)
printf("\nqueue overflow");
else
{
if(qp->front == -1)
qp->front=0;
qp->elements[++qp->rear]=item;
}
}
int rem(queue *qp)
{
char x;
if(qp->front==-1)
printf("\nqueue underflow");
else
x=qp->elements[qp->front++];
return x;
}

 

void display(queue *qp)
{
 int i;
 for(i=qp->front;i<=qp->rear;i++)
  {
    printf("double values : %lf\n",qp->elements[i]);
  }
}

 

int main()
{
queue *qp;
qp=(queue*)malloc(sizeof(queue));

 

initialize(qp);
add(qp,1);
add(qp,2);
add(qp,3);
add(qp,4);
add(qp,5);
display(qp);
}
==================================================================================

===================================================================================================
Q.10 Create a queue which contains 5 numbers and print the square value of every element of the queue.

#include<stdio.h>
#define SIZE 7

 

typedef struct queue
{
    int front;
    int rear;
    int elements[SIZE];
}queue;

 

void initialize(queue *sp)
{
    sp->front=-1;
    sp->rear=-1;
}

 

void add(queue *sp,int item)
{
    if(sp->rear==SIZE-1)
    printf("\nstack overflow");
    
    else
    {
        if(sp->front==-1)
        sp->front=0;
        sp->elements[++sp->rear]=item;
    }

 

}

 

int rem(queue *sp)
{
    char x;
    if(sp->front==-1)
    printf("\nstack underflow");
    
    else
    x=sp->elements[sp->front++];
    
    return x;
}

 

void display(queue *sp)
{
    int i;
    for(i=sp->front;i<=sp->rear;i++)
    {
        printf("square values is : %d\n",(sp->elements[i])*(sp->elements[i]));
    }
}

 

int main()
{
    queue v;
    initialize(&v);
    add(&v,1);
    add(&v,2);
    add(&v,3);
    add(&v,4);
    add(&v,5);

 

    display(&v);    
}
 ======================================================================================================================
 
Q.11 Create a stack which contains ASCII values for alphabets and print Alphabets.


#include<stdio.h>
#include<stdlib.h>
#define SIZE 27


typedef struct st
{
    int top;
    int elements[SIZE];
}stack;


void initialize(stack *sp)
{
    sp->top=-1;
}


void push(stack *sp,int item)
{
    if(is_full(sp))
    printf("\nstack overflow");
    
    else
    sp->elements[++sp->top]=item;
}

int pop(stack *sp)
{
    int x;
    
    if(is_empty(sp))
    printf("\nstack underflow");
    
    else
    x=sp->elements[sp->top--];
    
    return x;
    
}


int is_full(stack *sp)
{
    if(sp->top==SIZE-1)
    return 1;
    
    else
    return 0;
}


int is_empty(stack *sp)
{
    if(sp->top==-1)
    return 1;
    
    else
    return 0;
}


void display(stack *sp)
{
    int v;
    
    for(v=sp->top;v!=-1;v--)
    {
        printf("%c\t",sp->elements[v]);
    }
}


int main()
{
    stack v1;
    
    initialize(&v1);
    
    int v;
    
    for(v=70;v<90;v++)
    {
        push(&v1,v);
    }
    
    display(&v1);
}

=====================================================================================
Q.12 Take 10 numbers from user, Make two stacks as Even & Odd, Even stack contains even numbers , Odd stack contains odd numbers.
 
#include<stdio.h>
#include<stdlib.h>
#define SIZE 20

typedef struct Odd_st
{
    int Atop;
    int Aelements[SIZE];    
}odd;
typedef struct Even_st
{
    int Btop;
    int Belements[SIZE];    
}even;


void Ainitialize(odd *sp)
{
    sp->Atop=-1;
}
void Binitialize(even *sp)
{
    sp->Btop=-1;
}





void Apush(odd *sp,char item)
{
        if(A_is_full(sp))    
            printf("\nStack overflow\n");
        else
           
       void Bpush(even *sp,int item)
{
        if(B_is_full(sp))    
            printf("\nStack overflow\n");
        else
            sp->Belements[++sp->Btop]=item;
}




int Apop(odd *sp)
{
    int x;
    if(A_is_empty(sp))
        printf("\nStack underflow");
    else
        x=sp->Aelements[sp->Atop--];
    return x;    
}
int Bpop(even *sp)
{
    int x;
    if(B_is_empty(sp))
        printf("\nStack underflow");
    else
        x=sp->Belements[sp->Btop--];
    return x;    
}





int A_is_full(odd*sp)   
{
    if(sp->Atop == SIZE-1)      
        return 1;
    else
        return 0;
}
int B_is_full(even *sp)   
{
    if(sp->Btop == SIZE-1)      
        return 1;
    else
        return 0;
}





int A_is_empty(odd *sp)   
{
    if(sp->Atop == -1)          
        return 1;
    else
        return 0;    
}
int B_is_empty(even *sp)   
{
    if(sp->Btop == -1)          
        return 1;
    else
        return 0;    
}
void A_display(odd *sp)
{
    int i;
    
    for(i=sp->Atop;i!=-1;i--)
    {
        printf("%d ",sp->Aelements[i]);    
    }
    printf("\n");
}





void B_display(even *sp)
{
    int i;
    
    for(i=sp->Btop;i!=-1;i--)
    {
        printf("%d ",sp->Belements[i]);    
    }
    printf("\n");
}





int main()
{
    odd a;
    even b;
    int *s;
    Ainitialize(&a);
    Binitialize(&b);
    int i,v;
    for(i=0;i<10;i++)
    {
        printf("Enter Number :");
        scanf("%d",&v);
        {
          int val=v%2;
              switch(val)
         {
           case 0:
                Apush(&a,v);
                break;
           case 1:
                Bpush(&b,v);
                break;
         }
        }
    }
    A_display(&a);
    B_display(&b);
    
    
}
=================================================================================================================

Q.13 Make a program to copy elements of one stack to another.
#include<stdio.h>
#include<stdlib.h>
#define SIZE 5

// Example of Stack to revrse a string
typedef struct st1
{
	int top;
	int elements[SIZE];	
}stack1;

typedef struct st2
{
	int top;
	int elements[SIZE];	
}stack2;

// Initiazation of stack, top = -1

void initialize(stack1 *sp1,stack2 *sp2)       // sp = &s1
{
	sp1->top=-1;
	sp2->top=-1;
}

// Add an element on the top of the stack / PUSH operation

void pushToStack1(stack1 *sp,int item)
{
		if(sp->top == SIZE-1)	
			printf("\nStack overflow\n");
		else
			sp->elements[++sp->top]=item;
}


void pushToStack2(stack2 *sp,int item)
{
		if(sp->top == SIZE-1)	
			printf("\nStack overflow\n");
		else
			sp->elements[++sp->top]=item;
}
// Delete an element from the stack / POP operation

void copyToStack(stack1 *s1,stack2 *s2)
{
	int i;
	
	for(i=0;i<=s1->top;i++)
	{
		printf("%d ",s1->elements[i]);
		pushToStack2(s2,s1->elements[i]);	
	}	
}

void displayCopiedStack(stack2 *s)
{
	int i;
	for(i=0;i<=s->top;i++)
	{
		printf("%d ",s->elements[i]);	
	}	
}

int main()
{
	stack1 *s1;
	stack2 *s2;
	
	s1=(stack1*)malloc(sizeof(stack1));
	s2=(stack2*)malloc(sizeof(stack2));
	
	initialize(s1,s2);
		
	printf("==========\n");
	printf("Stack : 1 \n===========\n");
	
	pushToStack1(s1,10);
	pushToStack1(s1,20);
	pushToStack1(s1,30);
	pushToStack1(s1,40);
		
	copyToStack(s1,s2);
	
	printf("\n=========\n");
	printf("Stack : 2 \n==============\n");
	displayCopiedStack(s2);
	}
	===================================================================================================











Q.14 Read 5 numbers from user and store it in a stack.
#include<stdio.h>
#include<stdlib.h>
#define SIZE 7


typedef struct st
{
    int top;
    int elements[SIZE];
}stack;


void initialize(stack *sp)
{
    sp->top=-1;
}


void push(stack *sp,int item)
{
    if(is_full(sp))
    printf("\nstack overflow");
    
    else
    sp->elements[++sp->top]=item;
}


int pop(stack *sp)
{
    int x;
    
    if(is_empty(sp))
    printf("\nstack underflow");
    
    else
    x=sp->elements[sp->top--];
    
    return x;
}


int is_full(stack *sp)
{
    if(sp->top==SIZE-1)
    return 1;
    
    else
    return 0;
}


int is_empty(stack *sp)
{
    if(sp->top==-1)
    return 1;
    
    else
    return 0;
}


void display(stack *sp)
{
    int i;
    
    for(i=sp->top;i!=-1;i++)
    {
        printf("%d",sp->elements[i]);
    }
    
    printf("\n");
}


int main()
{
    stack s1;
    initialize(&s1);
    
    int i,j;
    for(i=s1.top;i<4;i++)
    {
        printf("enter the number : ");
        scanf("%d",&j);
        push(&s1,j);
    }
    display(&s1);
    
}

=========================================================================================
Q.15 Create a Link list of 5 nodes which stores information as a character.


 
#include<stdio.h>
#include<stdlib.h>


typedef struct nd             
{                          
    char data;
    struct nd *next;
}node;


typedef struct ls
{
    node *head,*tail;
}list;


node* createNode(char no)
{
    node *np;
    
    np=(node*)malloc(sizeof(node));  
    
    if(np == NULL)
    {
        printf("Memory not available");
        exit(0);    
    }
    
    np->data=no;
    np->next=NULL;
    
    return np;
}


void initalize(list *p)
{
    p->head = NULL;
    p->tail = NULL;
}
void insertAtail(list *p,char x)
{
    node *np;
    np = createNode(x);
    if(p->head==NULL)
    p->head = np;
    else
    p->tail->next = np;
    p->tail = np;
}


void traverse(list *p)
{
    node *sp;
    sp = p->head;
    
    while(sp!=NULL)
    {
        printf("%c",sp->data);
        sp=sp->next;
    }
}
int main()
{   
    list *p;
    
    p = (list*) malloc(sizeof(list));
    
    if(p == NULL)
    {
        printf("MEMORY UNVAVAILABLE");
        exit(0);
    }
    
    initalize(p);
    insertAtail(p,'A');
    insertAtail(p,'B');
    insertAtail(p,'C');
    insertAtail(p,'D');
    insertAtail(p,'E');
    
    traverse(p);
    
    free(p);
    
}

===================================================================================
Q.16 Write a program to count the number of nodes in the link list.
#include<stdio.h> 
#include<stdlib.h>

//MULTIPLE NODES
 
typedef struct st
 
{

 
int data;

 
struct nd *next;

 
}node;

 
typedef struct ls

 
{

 
node *head,*tail;

 
}list;

 
void initialize(list *s)

 
{

 
s->head = NULL;

 
s->tail = NULL;

 
}

 
node* createnode(int x)

 
{

 
node *sp;

 
sp = (node*)malloc(sizeof(node));

 
if(sp == NULL)

 
{

 
printf("Memoy not avaliable");

 
exit(0);

 
}
 
sp->data = x;

 
sp->next = NULL;

 
return sp;

 
}

 
void insertAtail(list *s,int x)

 
{

 
node *sp;

 
sp=createnode(x);

 
if(s->head==NULL)

 
s->head=sp;

 
else

 
s->tail->next=sp;

 
s->tail=sp;

 
}

 
void traverse(list *s)

 
{

 
node *p;

 
p=s->head;

 
while(p!=0)

 
{

 
printf("%d\n",p->data);

 
p=p->next;

 
}

 
}

 
int getnodes(list *s)

 
{

 
node *p;

 
int count=0;

 
for(p=s->head;p!=NULL;p=p->next)

 
{

 
++count;

 
}

 
return count;

 
}

 
int main()

 
{

 
list *s;

 
s=(list*)malloc(sizeof(list));

 
if(s == NULL)

 
{

 
printf("Memory not available");

 
exit(0);

 
}

 
initialize(s);

 
insertAtail(s,100);

 
insertAtail(s,200);

 
insertAtail(s,300);

 
traverse(s);

 
int count = getnodes(s);

 
printf("NO. OF NODES : %d",count);

 
}


==========================================================================================

Q.17 Create a Link list of 3 nodes containing 3 double values and print the average of 3 numbers.
Q.18 Create a Link list of 5 nodes and print it in reverse order.
©Q.19 Create a Link list of 3 nodes and delete the head node.
#include<stdio.h>
#include<stdlib.h>

 

struct node
{
    int data;
    struct node *nextptr;
};

 

struct node *firstnode;

 

void createnodelist(int numberofnodes);

 

void deletefirstnode();

 

void displaynodelist();

 

int main()
{
    int numberofnodes;
    
    printf("input the number of nodes : ");
    scanf("%d", &numberofnodes);
    
    createnodelist(numberofnodes);
    
    printf("\ndata entered in the list are : \n");
    displaynodelist();
    
    deletefirstnode();
    
    printf("\ndata after deletion of first node : \n");
    displaynodelist();
    return 0;
}

 

void createnodelist(int numberofnodes)
{
struct node *newnode;
struct node *tempnode;
int nodedata;
int nodectr;

 

firstnode = (struct node *)malloc(sizeof(struct node));

 

if(firstnode == NULL)
{
    printf("memory can not be allocated.");
}
else
{
    printf("input data for node 1 :");
    scanf("%d",&nodedata);
    
    firstnode->data = nodedata;
    firstnode->nextptr = NULL;
    
    tempnode = firstnode;
    
    for(nodectr =2; nodectr <= numberofnodes; nodectr++)
    {
        newnode = (struct node *)malloc(sizeof(struct node));
        
        if(newnode == NULL)
        {
            printf("memory can not be allocated.");
            break;
        }
        else 
        {
            printf("input data for node %d : ", nodectr);
            scanf("%d", &nodedata);
            
            newnode->data = nodedata;
            newnode->nextptr = NULL;
            
            tempnode->nextptr = newnode;
            tempnode = tempnode->nextptr;
        }
    }
}
    
}
void deletefirstnode()
{
    struct node *tempptr;
    
    if(firstnode == NULL)
    {
        printf("there are no node in the list.");
    }
    else
    {
        tempptr = firstnode;
        
        firstnode = firstnode->nextptr;
        
        printf("\ndata of node 1 which is being deleted is : %d\n", tempptr);
        
        free(tempptr);
    }
}

 

void displaynodelist()
{
    struct node *tempptr;
    
    if(firstnode == NULL)
    {
        printf("no data found in the list.");
    }
    else
    
    tempptr = firstnode;
    while(tempptr !=NULL)
    {
        printf("data = %d\n", tempptr->data);
        
        tempptr = tempptr->nextptr;
    }
}
 ====================================================================















Q.20 Create a list of 3 city names and Enter a city to be searched in the list .If city name exists in list then Display City Found.
Q.21 Create an array of 5 integer values and search an element in the array using Linear Search.
#include<stdio.h>
#include<conio.h>

 void main()
{
	int arr[5]={10,20,30,40};
	
	int item,flag;
	
	printf("\nEnter no   which is to be searched : ");
	scanf("%d",&item);
	
	int i;
	for(i=0;i<10;i++)
	{
		if(arr[i] == item)
		{
			flag = i+1;
			break;
		}
		
		else
		flag = 0;
	}
	
	if(flag !=0)
	{
		printf("\n found at location %d\n",flag,item);
		
	}
	
	else
	{
		printf("\nNo not found \n");
	}
}
======================================================================================================














Q.22 Create an array of string and search a perticular string using Linear Search.
Q.23 Sort an array of 5 numbers using Insertion sort
Q.24 Make a tree which contains 3 nodes. A is Root node, B is left child and C is right child.
#include<stdio.h>
#include<stdlib.h>


  typedef struct tr         
{                         
	char data;
	struct tr *left;
	struct tr *right;
}tree;

 tree* createnode(char ch)
{
   tree *n;
	
	n=(tree*)malloc(sizeof(tree));  
	
	n->data=ch;
	n->left=NULL;
	n->right=NULL;
	
	return n;
}

int main()
{	
	tree *root,*n1,*n2;	
	
	root = createnode('A');
	
	n1=createnode('B');
	
	n2=createnode('C');
	
	root->left=n1;
	root->right=n2;
	
	
		
	printf("\t%c\n",root->data);
	
	printf("%c\t",root->left->data);
	
	printf("\t%c\n",root->right->data);
	
	
}
================================================================================================================================

Q.25 Create a tree of 3 nodes where root node displays the value as "Color" , Left node of root shows value as "Red" and right node shows value as Green. 
     and print all node values in using preorder traversal.
Q.26 Create a link list of 3 integers and print the elements of link list in reverse order using stack.



©
